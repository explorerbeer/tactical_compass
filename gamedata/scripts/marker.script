-- Developments were utilized: GhenTuong --
-- Edited by: explorerbee --
-- Date: 21.09.2024 --

local compass_marker_task = nil

local marker_task_id = nil
local marker_task_current_target_id = nil

local is_storyline = nil

local compass_state = true

class "UICompassMarker" (CUIScriptWnd)

--[[--------------------------------------------------
	(Marker) Handlers
--------------------------------------------------]]--

function activate_markers()
	if compass_marker_task == nil then
		compass_marker_task = UICompassMarker()
		get_hud():AddDialogToRender(compass_marker_task)
	end

end

function deactivate_markers()
	if compass_marker_task ~= nil then
		get_hud():RemoveDialogToRender(compass_marker_task)
		compass_marker_task = nil
	end
end

function update_markers()
    if compass_marker_task ~= nil then
		compass_marker_task:Refresh()
    end
end

--[[--------------------------------------------------
    (Marker) Class init & draw
--------------------------------------------------]]--

function UICompassMarker:__init()
    super()
    self._tmr = time_global()
    self:InitControls()
end

function UICompassMarker:__finalize()
end

function UICompassMarker:InitControls()
    self:SetAutoDelete(true)
    self.xml = CScriptXmlInit()
    self.xml:ParseFile("tactic_marker.xml")

    self.marker_primary = self.xml:InitStatic("marker_primary", self)
    self.marker_secondary = self.xml:InitStatic("marker_secondary", self)
end

function UICompassMarker:Refresh()
    local compass_pos_state = compass_mcm.get_config("compass_sc_pos")

	if (not main_hud_shown()) then
		return
	end

    local actor = db.actor
    local dir = vector()

	local actor_dir = actor:direction()
    local actor_pos = actor:position()

    local target_screen_pos = marker_task_current_target_id and self:GetScreenCoordinates(marker_task_current_target_id)
    local target_world_pos = marker_task_current_target_id and self:GetWorldCoordinates(marker_task_current_target_id)

    if (not target_screen_pos) then
        self.marker_primary:Show(false)
        self.marker_secondary:Show(false)

        return
    else
        if is_storyline == "true" then
            self.marker_secondary:Show(false)
        else
            self.marker_primary:Show(false)
        end
    end

    local center_compass = 505

    local distance_to_target = target_world_pos:distance_to(actor_pos)
    local target_screen_pos_x  = center_compass

    local target_dir = target_world_pos:sub(actor_pos):normalize()
    local dot_product = target_dir:dotproduct(actor_dir)

    local cross = VEC_ZERO
    cross:crossproduct(target_dir, actor_dir)

    local side_factor = (cross.y < 0) and 1 or -1
    local offset = side_factor * (1 - dot_product) * 220

    target_screen_pos_x = center_compass + offset

    local prev_marker_x = self.prev_marker_x or center_compass
    local lerp_speed = 0.1

    local target_screen_pos_x = utils_compass.lerp(prev_marker_x, target_screen_pos_x, lerp_speed)
    
    target_screen_pos_x = clamp(target_screen_pos_x, center_compass - 223, center_compass + 227)
    self.prev_marker_x = target_screen_pos_x

    local marker_x = tostring(target_screen_pos_x)

    local marker_y = nil
    
    if compass_pos_state == 1 then
        marker_y = "696"
    else
        marker_y = "10"
    end
    
    if is_storyline then
        if is_storyline == "true" then
            self.marker_primary:Show(true)
            self.marker_primary:SetWndPos(vector2():set(tonumber(marker_x), tonumber(marker_y)))
        else
            self.marker_secondary:Show(true)
            self.marker_secondary:SetWndPos(vector2():set(tonumber(marker_x), tonumber(marker_y)))
        end
    end
end

function UICompassMarker:Update()
    CUIScriptWnd.Update(self)
    self:Refresh()
end

--[[--------------------------------------------------
	Marker (utils)
--------------------------------------------------]]--

function marker_task_actor_on_update()
    local tm = task_manager
	local task_info = tm.get_task_manager().task_info

	if (task_info) then
		if (marker_task_id) then
			local task = task_info[marker_task_id]
            
			if (task and db.actor:is_active_task(task.t)) then
				if (marker_task_id ~= tostring(task_id)) then
					marker_task_id = tostring(task_id)
				end
				
				if (marker_task_current_target_id ~= tonumber(task.current_target)) then
					marker_task_current_target_id = tonumber(task.current_target)
				end
				return
			else
				marker_task_id = nil
				marker_task_current_target_id = nil
			end
		end
		
		if (marker_task_id == nil) then
			for task_id, task in pairs(task_info) do
				if (task and task.t and db.actor:is_active_task(task.t)) then
                    
					if (marker_task_id ~= tostring(task_id)) then
						marker_task_id = tostring(task_id)

                        is_storyline = tm.task_ini:r_string_ex(marker_task_id, "storyline")
					end
					
					if (marker_task_current_target_id ~= tonumber(task.current_target)) then
						marker_task_current_target_id = tonumber(task.current_target)
					end
					return
				end
			end
		end
	end
end

function UICompassMarker:GetWorldCoordinates(id)
	local pos = nil
	local obj = db.storage[id] and db.storage[id].object or level.object_by_id(id)
	
	if (obj and (IsStalker(obj) or IsMonster(obj))) then
		pos = obj and utils_obj.safe_bone_pos(obj, "bip01_head")

        return pos
	elseif (obj and (type(obj.position) == "function")) then
		local tmp = obj:position()
		pos = tmp and vector():set(tmp.x, tmp.y + 1, tmp.z)

        return pos
	end
	
	if (pos == nil) then
		local se = alife_object(id)
		if not (se and se.online) then
			return nil
			
		elseif (se:clsid() == clsid.smart_terrain) then
			local tmp = se and se.position
			pos = tmp and vector():set(tmp.x, tmp.y + 1, tmp.z)
			
            return pos
		elseif (se:clsid() == clsid.online_offline_group_s) then
			local i = se:commander_id()
			local npc = i and db.storage[i] and db.storage[i].object or level.object_by_id(i)
			pos = npc and utils_obj.safe_bone_pos(npc, "bip01_head")

            return pos
		end
	end

	return nil
end

function UICompassMarker:GetScreenCoordinates(id)
    local pos = id and self:GetWorldCoordinates(id)

    local vec = pos and game.world2ui(vector():set(pos.x, pos.y + 0.5, pos.z), false)
	-- if (vec and (vec.x ~= -9999) and (vec.y ~= 0)) then
	-- 	return vec
	-- end

    return vec
end



--[[--------------------------------------------------
    Callbacks
--------------------------------------------------]]--

function on_option_change()
    compass_state = compass_mcm.get_config("t_c_show")
    local ui_state = ui_options.get('video/hud/show_hud')

    if compass_state then
        if (not compass_marker_task) then
            activate_markers()
        end
    else
        if compass_marker_task then
            deactivate_markers()
        end
    end

    if (not ui_state) and compass_marker_task then
        deactivate_markers()
    end
end

function on_console_execute(name)
    if name == "hud_draw" and compass_marker_task then
        compass_marker_task:Refresh()
    end
end

function actor_on_net_destroy()
    deactivate_markers()
end

function update_marker_hud()
    update_markers()
end

function actor_on_first_update()
    activate_markers()
end

--[[--------------------------------------------------
    Register callbacks
--------------------------------------------------]]--

function on_game_start()
    RegisterScriptCallback("actor_on_first_update", actor_on_first_update)
    RegisterScriptCallback("actor_on_net_destroy", actor_on_net_destroy)
    RegisterScriptCallback("on_option_change", on_option_change)
    RegisterScriptCallback("on_console_execute", on_console_execute)
    
    RegisterScriptCallback("GUI_on_show", update_marker_hud)
    RegisterScriptCallback("GUI_on_hide", update_marker_hud)

    RegisterScriptCallback("actor_on_update", marker_task_actor_on_update)
    RegisterScriptCallback("actor_on_update", marker_stashes_actor_on_update)
end

--[[--------------------------------------------------
    Dynahud support
--------------------------------------------------]]--

dynahud = zzzz_dynahud.show_minimap

zzzz_dynahud.show_minimap = function(show)
    if show then
        deactivate_markers()
    else
        activate_markers()
    end
dynahud(show)
end