-- Author: explorerbee --
-- Date: 21.09.2024 --

HUD = nil

local init_markers = {}
local markers_list = {}
local prev_obj_positions = {}

local get_world_coords = markers_utils.get_world_coordinates
local calc_distance = markers_utils.calc_distance_to_target
local define_distance = markers_utils.define_distance_to_marker
local define_marker_y = markers_utils.define_marker_y
local calc_position = markers_utils.calc_position
local set_distance_text = markers_utils.set_distance_text
local get_config = compass_mcm.get_config
local calc_alpha = markers_utils.calc_alpha

local blacklisted_categories = markers_definitions.blacklisted_categories
local transition_types = markers_definitions.transition_types
local marker_categories = markers_definitions.marker_categories

local is_show_markers = true

class "HUDMarker" (CUIScriptWnd)

function HUDMarker:__init()
    super()
    self._tmr = time_global()

    self:InitControls()
end

function HUDMarker:InitControls()
    self:SetAutoDelete(true)

    self.xml = CScriptXmlInit()
    local xml = self.xml

    self.xml:ParseFile("ui_markers.xml")

    self.markers = xml:InitStatic("markers", self)
end

function HUDMarker:Update()
    CUIScriptWnd.Update(self)
    self:RefreshMarkers()

    self.markers:Show(is_show_markers and main_hud_shown())
end

function HUDMarker:CreateMarker(id, marker_type)
    if not markers_list[id] then
        markers_list[id] = self.xml:InitStatic("markers:marker_" .. marker_type, self.markers)
    end

    return markers_list[id]
end

function HUDMarker:UpdateSingleMarker(id, spot_data, actor_pos, actor_dir)
    local compass_pos_state = get_config("tc_main/compass_sc_pos")

    local marker_type = spot_data.category
    local marker_world_pos = id and get_world_coords(id)

    if not marker_world_pos then
        if markers_list[id] then
            markers_list[id]:Show(false)
        end

        return
    end

    local marker = self:CreateMarker(id, marker_type)
    local distance_to_target = calc_distance(marker_world_pos, actor_pos)

    local mcm_marker_config  = define_distance(marker_type)
    local distance_threshold = mcm_marker_config.distance
    local is_enabled = mcm_marker_config.is_enabled
    local is_distance = mcm_marker_config.is_distance
    local is_always_visible = mcm_marker_config.is_always_visible

    if not is_enabled or not distance_to_target then
        marker:Show(false)

        return
    end

    local marker_x = calc_position(marker_world_pos, actor_pos, actor_dir, prev_obj_positions and prev_obj_positions[id])
    local marker_y = define_marker_y(compass_pos_state, marker_type)

    local marker_alpha = calc_alpha(is_always_visible, distance_to_target, distance_threshold)

    local screen_width = 1024
    local compass_width = self.markers:GetWidth() * 0.75
    local marker_half_width = marker:GetWidth() * 0.75 / 2

    local margin = (screen_width - compass_width) / 2

    if marker_x and marker_x > margin + marker_half_width and marker_x < margin + compass_width - marker_half_width then
        marker:Show(true)
        marker:SetWndPos(vector2():set(marker_x, marker_y))
        marker:SetTextureColor(GetARGB(marker_alpha, 255, 255, 255))

        set_distance_text(marker, marker_x, distance_to_target, is_distance, is_always_visible, marker_alpha)
    else
        marker:Show(false)
    end

    prev_obj_positions = prev_obj_positions or {}
    prev_obj_positions[id] = marker_x
end

function HUDMarker:RefreshMarkers()
    local device_obj = device()
    local dir = device_obj.cam_dir
    local actor_pos = device_obj.cam_pos
    local actor_dir = vector():set(dir.x, 0, dir.z):normalize()

    for id, spot_data in pairs(init_markers) do
        self:UpdateSingleMarker(id, spot_data, actor_pos, actor_dir)
    end
end

function activate_markers()
    if HUD == nil then
        HUD = HUDMarker()
        get_hud():AddDialogToRender(HUD)
        HUD:RefreshMarkers()
    end
end

function deactivate_markers()
    if HUD ~= nil then
        get_hud():RemoveDialogToRender(HUD)
        HUD = nil
    end
end

function HUDMarker:__finalize()
end

function collect_transitions()
    for i = 1, 65534 do
        local se_obj = alife_object(i)

        for spot, category in pairs(transition_types) do
            if se_obj then
                if level.map_has_object_spot(i, spot) ~= 0 then
                    init_markers[i] = { type = spot, category = category }
                end
            end
        end
    end
end

function map_location_added(binder, spot_type, id)
    if not blacklisted_categories[spot_type] then
        if not init_markers[id] then
            init_markers[id] = { type = spot_type, category = marker_categories[spot_type] }
        elseif init_markers[id].type ~= spot_type then
            remove_old_marker(id)

            init_markers[id] = { type = spot_type, category = marker_categories[spot_type] }
        end
    end
end

function on_check_spot_existing()
    for id, spot_data in pairs(init_markers) do
        local spot_type = spot_data.type
        local category = spot_data.category

        if category ~= transition_types[category] and category ~= "deadbody" and level.map_has_object_spot(id, spot_type) == 0 then
            clear_marker(id)
        end
    end
end

function add_corpse_marker(npc)
    local npc_id = npc:id()

    local marker_type = "deadbody_location"

    remove_old_marker(npc_id)

    init_markers[npc_id] = {
        type = marker_type,
        category = markers_definitions.marker_categories[marker_type]
    }
end

function remove_corpse_marker(npc, who)
    local npc_id = npc:id()

    _ = not npc:alive() and clear_marker(npc_id)
end

function remove_old_marker(id)
    if markers_list[id] then
        markers_list[id]:Show(false)

        markers_list[id] = nil
    end

    if prev_obj_positions and prev_obj_positions[id] then
        prev_obj_positions[id] = nil
    end
end

function clear_marker(id)
    if markers_list[id] then
        markers_list[id]:Show(false)
        markers_list[id] = nil
    end

    prev_obj_positions[id] = nil

    init_markers[id] = nil
end

function markers_toggle(key)
    if key ~= compass_mcm.get_config("tc_keybinds/keybind") then return end

    is_show_markers = not is_show_markers
end

function on_game_start()
    RegisterScriptCallback("actor_on_first_update", collect_transitions)
    RegisterScriptCallback("actor_on_update", on_check_spot_existing)
    RegisterScriptCallback("actor_map_location_added", map_location_added)

    RegisterScriptCallback("actor_on_first_update", activate_markers)
    RegisterScriptCallback("actor_on_net_destroy", deactivate_markers)
	RegisterScriptCallback("actor_on_before_death", deactivate_markers)

    RegisterScriptCallback("npc_on_death_callback", add_corpse_marker)
    RegisterScriptCallback("npc_on_use", remove_corpse_marker)
    RegisterScriptCallback("monster_on_death_callback",add_corpse_marker)
    RegisterScriptCallback("monster_on_actor_use_callback",remove_corpse_marker)

    RegisterScriptCallback("on_key_press", markers_toggle)
end